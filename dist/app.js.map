{"version":3,"sources":["../app.js"],"names":["express","require","app","set","process","env","PORT","mongoose","passport","bodyParser","LocalStrategy","session","methodOverride","User","landingRoutes","authRoutes","use","secret","resave","saveUninitialized","initialize","authenticate","serializeUser","deserializeUser","urlencoded","extended","json","static","__dirname","req","res","next","locals","currentUser","user","Promise","global","url","DATABASEURL","connect","listen","get","IP","console","log"],"mappings":";;AAAA,IAAIA,UAAUC,QAAQ,SAAR,CAAd;AACA,IAAIC,MAAMF,SAAV;;AAEAE,IAAIC,GAAJ,CAAQ,MAAR,EAAiBC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAArC;;AAEA,IAAIC,WAAiBN,QAAQ,UAAR,CAArB;AAAA,IACIO,WAAiBP,QAAQ,UAAR,CADrB;AAAA,IAEIQ,aAAiBR,QAAQ,aAAR,CAFrB;AAAA,IAGIS,gBAAiBT,QAAQ,gBAAR,CAHrB;AAAA,IAIIU,UAAiBV,QAAQ,iBAAR,CAJrB;AAAA,IAKIW,iBAAiBX,QAAQ,iBAAR,CALrB;AAAA,IAOIY,OAAiBZ,QAAQ,eAAR,CAPrB;;AASA,IAAIa,gBAAkBb,QAAQ,kBAAR,CAAtB;AAAA,IACIc,aAAkBd,QAAQ,eAAR,CADtB;;AAGAC,IAAIc,GAAJ,CAAQL,QAAQ;AACZM,YAAQ,cADI;AAEZC,YAAQ,KAFI;AAGZC,uBAAmB;AAHP,CAAR,CAAR;;AAMIjB,IAAIc,GAAJ,CAAQR,SAASY,UAAT,EAAR;AACAlB,IAAIc,GAAJ,CAAQR,SAASG,OAAT,EAAR;AACAH,SAASQ,GAAT,CAAa,IAAIN,aAAJ,CAAkBG,KAAKQ,YAAL,EAAlB,CAAb;AACAb,SAASc,aAAT,CAAuBT,KAAKS,aAAL,EAAvB;AACAd,SAASe,eAAT,CAAyBV,KAAKU,eAAL,EAAzB;;AAEArB,IAAIc,GAAJ,CAAQP,WAAWe,UAAX,CAAsB,EAACC,UAAU,IAAX,EAAtB,CAAR;AACAvB,IAAIc,GAAJ,CAAQP,WAAWiB,IAAX,EAAR;AACAxB,IAAIC,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;AACAD,IAAIc,GAAJ,CAAQhB,QAAQ2B,MAAR,CAAeC,YAAY,SAA3B,CAAR;AACA1B,IAAIc,GAAJ,CAAQJ,eAAe,SAAf,CAAR;;AAEAV,IAAIc,GAAJ,CAAQ,UAAUa,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AAClCD,QAAIE,MAAJ,CAAWC,WAAX,GAAyBJ,IAAIK,IAA7B;AACAH;AACD,CAHC;;AAKA7B,IAAIc,GAAJ,CAAQF,aAAR;AACAZ,IAAIc,GAAJ,CAAQD,UAAR;;AAEJR,SAAS4B,OAAT,GAAmBC,OAAOD,OAA1B;AACA,IAAIE,MAAMjC,QAAQC,GAAR,CAAYiC,WAAZ,IAA2B,qEAArC;AACC/B,SAASgC,OAAT,CAAiBF,GAAjB;AACD;;AAEA;AACA;;AAEAnC,IAAIsC,MAAJ,CAAWtC,IAAIuC,GAAJ,CAAQ,MAAR,CAAX,EAA4BrC,QAAQC,GAAR,CAAYqC,EAAxC,EAA4C,YAAY;AAAG;AACzDC,YAAQC,GAAR,CAAY,qBAAZ;AACD,CAFD","file":"app.js","sourcesContent":["var express = require(\"express\");\nvar app = express();\n\napp.set('port', (process.env.PORT || 3000));\n\nvar mongoose       = require(\"mongoose\"),\n    passport       = require(\"passport\"),\n    bodyParser     = require(\"body-parser\"),\n    LocalStrategy  = require(\"passport-local\"),\n    session        = require(\"express-session\"),\n    methodOverride = require(\"method-override\"),\n\n    User           = require(\"./models/user\");\n    \nvar landingRoutes   = require('./routes/landing'),\n    authRoutes      = require(\"./routes/auth\")\n    \napp.use(session({\n    secret: 'keyboard cat',\n    resave: false,\n    saveUninitialized: false\n    }));\n    \n    app.use(passport.initialize());\n    app.use(passport.session());\n    passport.use(new LocalStrategy(User.authenticate()));\n    passport.serializeUser(User.serializeUser());\n    passport.deserializeUser(User.deserializeUser());    \n    \n    app.use(bodyParser.urlencoded({extended: true}));\n    app.use(bodyParser.json());\n    app.set(\"view engine\", \"ejs\");\n    app.use(express.static(__dirname + \"/public\"));\n    app.use(methodOverride(\"_method\"));\n  \n    app.use(function (req, res, next) {\n    res.locals.currentUser = req.user;\n    next();\n  });\n  \n    app.use(landingRoutes);\n    app.use(authRoutes);\n\nmongoose.Promise = global.Promise;\nvar url = process.env.DATABASEURL || 'mongodb://sandsula:pachuchi123@ds029381.mlab.com:29381/data_counter';\n mongoose.connect(url);\n// mongoose.connect(\"mongodb://localhost/gsm_guru\");\n\n/* ============================            ============================ */\n//ეს ყოველთვის უცვლელია და არის ბოლოში\n\napp.listen(app.get('port'), process.env.IP, function () {  //if server is on\n  console.log(\"======STARTED======\");\n});"]}